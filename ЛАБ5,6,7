Методы упорядочивания данных
Сортировка выбором (Selection Sort)
Принцип работы: Поиск минимального/максимального элемента с последующим перемещением в начало/конец массива.

Процесс выполнения:

Внешний цикл последовательно обрабатывает каждый элемент

Внутренний цикл находит минимальный элемент в неотсортированной части

Обмен найденного минимума с текущим элементом

Эффективность: O(n²) - квадратичная сложность из-за двойного вложенного цикла

Сортировка обменом (Bubble Sort)
Принцип работы: Последовательное сравнение и обмен соседних элементов

Оптимизации:

Флаг swapped для досрочного завершения при отсортированности

Уменьшение области прохода внутреннего цикла

Эффективность: O(n²) в худшем случае, O(n) в лучшем

Сортировка вставками (Insertion Sort)
Принцип работы: Построение отсортированной последовательности путем вставки новых элементов

Процесс:

Каждый новый элемент помещается в правильную позицию среди уже упорядоченных

Сдвиг элементов для освобождения места вставки

Эффективность: O(n²), эффективен для небольших и частично отсортированных массивов

Сортировка слиянием (Merge Sort)
Принцип работы: Рекурсивное разделение массива с последующим слиянием

Ключевые этапы:

Разделение на подмассивы

Рекурсивная сортировка частей

Слияние отсортированных фрагментов

Эффективность: O(n log n) - логарифмическая сложность

Сортировка Шелла (Shellsort)
Принцип работы: Улучшенная версия сортировки вставками с переменным шагом

Особенности:

Сравнение элементов на определенном расстоянии

Постепенное уменьшение шага до 1

Эффективность: O(n²) в худшем случае

Быстрая сортировка (Quick Sort)
Принцип работы: Разделение массива относительно опорного элемента

Этапы:

Выбор опорного элемента

Разделение на элементы меньше, равные и больше опорного

Рекурсивная сортировка частей

Эффективность: O(n log n) в среднем, O(n²) в худшем случае

Пирамидальная сортировка (Heap Sort)
Принцип работы: Использование структуры данных "куча"

Процесс:

Построение двоичной кучи

Последовательное извлечение максимального элемента

Восстановление свойств кучи

Эффективность: O(n log n) - стабильная производительность

Методы поиска данных
Линейный поиск
Принцип: Последовательная проверка каждого элемента

Эффективность: O(n) - линейная зависимость

Бинарный поиск
Принцип: Поиск в отсортированном массиве путем деления пополам

Условия: Требуется предварительная сортировка данных

Эффективность: O(log n) - логарифмическая сложность

Интерполирующий поиск
Принцип: Предсказание позиции на основе распределения значений

Особенности: Эффективен при равномерном распределении данных

Эффективность: O(log log n) в лучшем случае, O(n) в худшем

Поиск Фибоначчи
Принцип: Использование чисел Фибоначчи для определения позиций сравнения

Преимущества: Эффективен для больших массивов

Эффективность: O(log n) - сравнима с бинарным поиском

Все алгоритмы имеют различные характеристики производительности и применяются в зависимости от конкретных требований к данным и ресурсам.
